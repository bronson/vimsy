Yet another vim-based Rails development environment.

Inspirations:
- http://www.akitaonrails.com/2009/04/27/the-best-environment-for-rails-on-windows-part-2
- All the URLs found in comments in the vimrc file


TODO:
Why does C-/ work in the terminal but not gvim?
rubytest should save the file before running the tests.
rubytest should not scan for valid tests if running with T.  Just run the file.
rubytest definitely needs to present its quickfix better.  (crib from recent rails.vim?)
NERDtree should support 'n' on a directory name to create and open a new file in a directory
haml? http://www.vim.org/scripts/script.php?script_id=1433
instead of railstest, http://www.vim.org/scripts/script.php?script_id=2869 ?
show matching begin/else/end/etc when moving the cursor
tComment looks much tighter than NERD_commenter.  Faster too?
Better git binding?  display git branch and file status?
  http://www.vim.org/scripts/script.php?script_id=2861
snippets?  would I use them?
folding?   never been happy with folding in the past.  http://eigenclass.org/hiki.rb?simplefold+plugin+0.4.0
vividchalk: http://www.vim.org/scripts/script.php?script_id=1891
sethbc-fuzzy_file_finder can use ff 2.22.3.  is it worth updating?
is it even worth using ff_textmate?  is it that much better than plain ff?
get newest haml indent/syntax (2008 Sep 11) included in vim distro.  (just one regex change)
is it possible to extract rails.vim's rSpec functionality and use it instead of current rSpec stuff?


Keystrokes:
B   -- when inside block, converts block between {} and do/end
C-J -- bufexplorer (orig C-J is same as j)
C-K -- fuzzy file finder (orig C-K is same as k)
C-/ -- Toggle the comments on the selected lines or current line
,D  -- fire up the nerd tree
,t  -- run the test containing the cursor (like :.Rake but much faster)
,T  -- run all tests in the current file (like :Rake but much faster)
TlistToggle -- show/hide the tag list (updates every updatetime ms)
% jumps between matching begin/if/while/do/rescue/end/etc.  (matchit)


Vim Builtins: (worth mentioning)
C-^ -- edit previous file (file marked with # in the output of :ls), C-W C-^ -- split and switch
:bd -- close current buffer
C-W _ -- maximize current window (:on makes it even more maximal)
C-W T -- open this window in a new tab
H M L -- move cursor on screen to high, middle, low
C-T / C-D -- (insert mode) insert tab / delete tab from beginning of line

:help rails
:help matchit


Rails:
gf -- if you're over a class or symbol, try gf.  It should take you.
:A -- go to alternate file (usually test file)
  AS -- split, AV -- vertical split, AT -- tab, AD -- replace current buffer
:R -- got to related file (model/schema, controller/template)
:Rmodel (name) -- go to the named model
  :Rcontroller, :Rview, :Rjavascript, :Rlayout, etc.
:Rake (targets) -- run rake, open errors in quickfix window
  with no targets, tries to figure out from current file
:Rextract -- extract a partial
:Rtree -- open nerdtree view of the Rails project
C-X C-U -- complete current word from Rails keywords


Available Keys
--------------
^H -- just use h
^L -- that one time a year you want to redraw the screen, hit :redr
^N -- just use j
^P -- just use k


Rejected
--------

allml: Looks like a bunch of obscure keybindings for editing XMLish files.
       Not very exciting or useful.
camelcasemotion: how often do you need to move in a camelcase word?
surround: screws up vi mode (hit v, select some text, then s.  boo!)
specky: includes a bunch of non-rspec-related garbage.  It's hard enough to get vim scripts to coexist as it is, there's no need to insert unrelated stuff. http://www.vim.org/scripts/script.php?script_id=2286
vim-rspec: relies on Ruby+hpricot/xsltproc parsing HTML?  Seems awfully overcomplex.
