*vimsy.txt*                    Vimsy                     Version 0.1

              A nice vim-based development environment          *vimsy*



==============================================================================
0. Table of Contents                                      *vimsy-contents*

1. |vimsy-plugins|       List of Plugins
2. |vimsy-keystrokes|    How to use Vimsy's features.
3. |vimsy-todo|          A huge list of things to improve
4. |vimsy-rejplugins|    Why good plugins might not be included
5. |vimsy-changes|       List of user-visible changes
6. |vimsy-about|         Download new versions, licensing, etc.


==============================================================================
1. Installed Plugins                                      *vimsy-plugins*
                                                          *vimsy-packages*

These are the plugins that give vimsy all its functionality.

- NERD Tree        4.1.0    01 Dec 2009       |NERDTree-contents|
  Navigate an outline view of the files in your filesystem

- Bufexplorer      7.2.6    12 Feb 2010       |buffer-explorer|
  Quickly switch among your open buffers

- Matchit          1.13.2   25 Jan 2008       |matchit|
  Allows % to match if statements, html tags, just about anything.

- Rails            4.1      18 Dec 2009       |rails-plugin-author|
  Brilliance for Rails developers by the legendary tpope.

- Snipmate         0.83     13 Jul 2009       |snippets|
  Hit the tab key to nsert Textmate-like snippets.

- Snipmate-snippets         18 Dec 2009
  Includes Scrooloose's comprehensive snippet library

- NERD Commenter   2.2.2    30 Mar 2009       |NERDCommenterContents|
  Comment and uncomment lines in just about any language.

- Vim Fugitive     1.0+     03 Mar 2010       |fugitive|
  A great way to interact with Git from within Vim.

- Surround         1.90     05 Mar 2010       |surround|
  Easily wrap parens and tags around text.

- Ragtag           2.0      08 Feb 2018       |ragtag|
  Speed up editing HTML/XML/ERb/JSP etc. files.

- Taglist          4.5      21 Sep 2007       |taglist.txt|
  Easily list and navigate among the functions, vars, etc in a file.

- Textmate Fuzzyfinder  2.13  04 Oct 2008
  Open any file in your project with just a few keystrokes

- IndexedSearch             21 Nov 2006
  Shows the number of hits when searching with /,?,*,etc.

- Endwise          1.0      13 Dec 2009
  Automatically closes blocks in Ruby and vimscript

- RubyTest         1.0      11 Mar 2010
  Quickly run Ruby tests, navigate failures in the quickfix window

- Alternate        2.18     07 Jun 2007         |alternate|
  Switch between .c and .h files by hitting :A (or :AV, :AT, etc)

- RunSpec                   24 Jan 2009
  Quickly run Ruby RSpec tests, navigate failures in the quickfix window

- RubyBlockConv             2005                    |vimsy-blockconv|
  Easily convert Ruby blocks between {} and do/end

See |vimsy-rejected-plugins| for the plugins that didn't make the cut.

Features

- Hit i.e. for<tab> to insert the snippet for a for loop.
- In insert mode, hit Control-R <tab> to show a list of available snippets.
- Highlights erroneous trailing whitspace
- Cucumber indentation and syntax highlighting
- CoffeeScript syntax highlighting
- Control-/ to toggle commenting, |vimsy-control-/|
- Control-W e to close a buffer without affecting the window layout
- Restores folds and cursor position when opening a file again


=============================================================================
2. Keystrokes                                          *vimsy-keystrokes*

,B  -- when you select a block in visual mode, ,B will convert between {} and do/end. *vimsy-blockconv*
C-J -- bufexplorer (original C-J binding did the same thing as j)
C-K -- fuzzy file finder (original C-K binding did the same thing as k)
,C  -- Toggle the comments on the selected lines or current line
C-/ -- Also toggles comments, see |vimsy-control-/|.
,d  -- toggle the nerd tree
,D  -- show the current file in the nerd tree
,l  -- toggle the tag list
,t  -- run the test containing the cursor (like :.Rake but much faster)
,T  -- run all tests in the current file (like :Rake but much faster)
,w  -- toggle line wrapping on and off
,*  -- grep the entire project for the identifier under the cursor
% jumps between matching begin/if/while/do/rescue/end/etc.  (matchit)
C-Space -- complete word (same as C-X C-O)
C-W e -- closes a buffer but leaves the window open (C-W C-E works too).

Tasks:
Create a file or directory: ,d (open nerdtree), put the cursor on the directory to contain the new file, and hit m.
Move or copy files: ,d (open nerdtree), put the cursor on the directory to contain the new file, and hit m.

Vim Builtins: Here are some highlights.  Everything is listed in |index.txt|.
C-^ -- edit previous file (file marked with # in the output of :ls), C-W C-^ -- split and switch
:wa -- write all buffers (Save All)
:wqa -- write all buffers and quit
C-W _ -- maximize current window. C-W o or :on (:only) makes it even more maximal.
C-W T -- open this window in a new tab
C-W KJHL -- move current window to the extreme border (J makes it full width at the bottom of the screen, etc)
C-W rR -- rotate open windows clockwise / counterclockwise
H M L -- move cursor on screen to high, middle, low
C-T / C-D -- (insert mode) insert tab / delete tab from beginning of line
C-O / C-I -- go to older / newer cursor position (see |jump-motions|)
Tabs: :tabnew, :tabnext (gt), :tabprev (gT), :close
[m ]m -- move to the previous or next method/function
[[ ][ -- move to previous or next outermost { } brace (ruby: class or module)
[( ]( -- move to previous or next paren ( )
gd gD -- go to definition of variable under cursor (d searches function, D searches file)
gq -- reformat comment (visually select first, or hit
      gq]/ to reformat to the end of the current comment block)

Rails:
gf -- if you're over a class or symbol, try gf.  It should take you.
:A -- go to alternate file (usually to the test file)
  AS -- split, AV -- vertical split, AT -- tab, AD -- replace current buffer
:R -- got to related file (model/schema, controller/template)
  RS -- split, RV -- vertical split, RT -- tab, RD -- replace current buffer
:Rmodel (name) -- go to the named model
  :Rcontroller, :Rview, :Rjavascript, :Rlayout, etc.
:Rake (targets) -- run rake, open errors in quickfix window
  with no targets, tries to figure out from current file
:Rextract -- extract a partial (in your view, use v to select the code to extract, hit :Rextract NAME (name of your partial), and out it comes
:Rtree -- open nerdtree view of the Rails project (any diff from ,d?)
C-X C-U -- complete current word from Rails keywords


Available Keystrokes -- common keystrokes that are available for vimsy's use.
^H -- just use h
^N -- just use j (ex-emacs users might want this left alone)
^P -- just use k (ex-emacs users might want this left alone)


==============================================================================
3. DISCUSSION                                            *vimsy-discussion*

Vimsy includes some controversial features.  If you see surprising
behavior, this section may address it.  (If you're surprised that you
*don't* see an expected behavior, check |vimsy-rejected-plugins|).


Map Leader                                               *vimsy-map-leader*

A lot of people recommend changing vim's map leader from "\" to ",".
The claim is that "\" is hard to type and in different areas of different
keyboards.  Most people rarely use "," anyway, so why not make things
more convenient?

Right now, Vimsy follows this advice.  The problem is, this breaks
existing Vim behavior, not something that Vimsy ever cares to do.
This will probably be reverted very soon.


Control-/                                                *vimsy-control-/*

This is the one keybinding that all IDEs use to toggle comments.  Vimsy
supports this, but there's a caveat: most terminals convert Control-/ to
Control-_.  Control-_ is already used to switch RTL/LTR, languages so
Hebrew and Farsi developers may find vimsy's behavior surprising.  If
so, this should be reverted.

Furthermore, A bug in vim-gtk and vim-gnome prevents these versions of
Vim from being able to produce a Control-/.  You can test this for
yourself: hit colon to go to the command line, then hit control-V
control-/.  If you see "^/" or "^_", your version of Vim can recognize
Control-/.  If you see "/", then you're stuck and can only comment using
Control-_ or ,C.
         https://bugs.launchpad.net/ubuntu/+source/vim/+bug/534124


==============================================================================
3. TODO                                                   *vimsy-todo*

Do we still need RubySpec now that RubyTest does specs?
Hitting Control-] on "empty?" complains E426: tag not found: empty\?  (must set autocmd FileType ruby setlocal iskeyword+=!,? for this to work)
Using , as a map leader is probably a bad idea!  People who use , to repeat the last f or t command backward will be mighty surprised.
  Also, it sucks when typing to have to wait for a timeout before the comma appears.  (is this true of \ too?)
Add ack plugin or something to make searching easier.
Add a color switcher and some decent color themes.

Maybe set tw=72 for text files only?  That seems unintrusive and useful?
Organize this todo list by package and concept!
Add tag closing: http://pastey.net/132688-2fb8 or http://github.com/mitechie/pyvim/blob/master/vim/ftplugin/xml.vim
How to I make HTML tags auto-close?  Or can I make completion close tags?
Can I join forces with http://github.com/mitechie/pyvim ?
Integrate http://github.com/astashov/vim-ruby-debugger (how does one debug regular ruby apps, or generators?)
Move the swapfiles somewhere else, it's a pain to .gitignore them.
Figure out a keypress to toggle :set paste! on and off.  I do it a lot.
How do I cancel bufexplorer and to back to the file I was editing without changing the previous file (Control-6)?  Hitting esc doesn't work.
Rails vim -- turn off logfile tweaks.  Coloring makes opening large files painful, plus it breaks 1G, 500G, etc to navigate in the file.
Also make bufexplorer support s and v to open new buffer horiz or vertically split.
What is omnifunc and how is it different from C-X C-U
Add a.vim (alternate) http://www.vim.org/scripts/script.php?script_id=31 and map the keys to be the same as railsmode.
Add :ver N and :hor N commands to set the vertical and horizontal size of the current window
NT: Should probably let ? be search backward, use h for help.
NT: control-J should open buf explorer, C-K should do fuzzy file finder.
NT: Make space behave the same as return when navigating the tree.
Also make bufexplorer to use h for help.
NT: Make a keystroke to fire off a grep/ack from that directory (or parent dir of curr file)
NT: Add c/n to nerdtree for one-step file creation
NT: Can I hit L on a dir or file to produce a :Glog there?
Add http://github.com/adamlogic/ack.vim/commit/850e83088e0a623390446ea88fc8740857777f25 ?
rubytest should save the file before running the tests.
rubytest should not scan for valid tests if running with T.  Just run the file.
rubytest definitely needs to present its quickfix better.  (crib from recent rails.vim?)
Make ,w toggle through wrapping: nowrap, wrap by word, wrap by character.  Right now ,w only cycles nowrap and wrap by word.
haml? http://www.vim.org/scripts/script.php?script_id=1433
instead of railstest, http://www.vim.org/scripts/script.php?script_id=2869 ?
I'd like Rails plugin to support :Routes/:Rroutes, :Rschema, and :Renvironment?
show matching begin/else/end/etc when moving the cursor
adding html textobjects seems rather useful: http://www.vim.org/scripts/script.php?script_id=3000
Display git branch and file status?  http://www.vim.org/scripts/script.php?script_id=2258
folding?   never been happy with folding in the past.  http://eigenclass.org/hiki.rb?simplefold+plugin+0.4.0
vividchalk: http://www.vim.org/scripts/script.php?script_id=1891
get newest haml indent/syntax (2008 Sep 11) included in vim distro.  (just one regex change)
is it possible to extract rails.vim's rSpec functionality and use it instead of current rSpec stuff?
Is it possible to unit test this mess?  http://www.vim.org/scripts/script.php?script_id=2565
ruby indentation screws up when I type end_date, it unindents prematurely.  It should wait for the next character before doing that.

Bug in ERb indentation:
  <% semantic_form_for(:rep, report,
               :html => { :method => :get },
               :url => { :action => :output }
              ) do |form| %>
    <%= form.input :type, :as => :hidden, :value => 'groovy' %>
  If you auto-indent this, everything ends up too far to the right.
  But, if you put semantic_form_for all on one line, it gets it right.


==============================================================================
4. Rejected Plugins            *vimsy-rejplugins*  *vimsy-rejected-plugins*

These are plugins that were considered but not used.  See
|vimsy-plugins| for the list of currently installed plugins.

fuzzyfinder  Jamis Buck wrote fuzzyfinder-textmate, then abandoned it when
             fuzzyfinder kept and breaking his changes.  It's a sad story,
             but not nearly as sad as trying to use the original fuzzyfinder!
             Stock fuf is so laborious to use that I don't see why anyone
             would use it over vim's :find built-in.

camelcasemotion    How often do you need to move within a camelcase word?
             Maybe once every few weeks?

specky       Includes a bunch of non-rspec-related garbage.  It's hard
             enough to get vim scripts to reliably coexist as it is,
             there's no need to bring along unrelated stuff!

vim-rspec    relies on Ruby+hpricot/xsltproc parsing HTML?  Seems rather
             overcomplex.  Glad I found a simpler alternative.


==============================================================================
5. Changes                                             *vimsy-changes*

Once Vimsy stabilizes, user-visible changes will be listed here.


==============================================================================
6. About                                               *vimsy-about*

Vimsy was assembled by Scott Bronson, brons_vimsy@rinspin.com.
Its vimrc was written from scratch but cribbed heavily from
http://vim.wikia.com/wiki/Example_vimrc and Akita's version of
Scrooloose's vimfiles.

Homepage:     http://github.com/bronson/vimsy

                                                      *vimsy-license*
Each plugin in vimsy is licensed individually by its author.
All other content in Vimsy is distributable under the same
terms as Vim itself.  See |license|.  No warranties, expressed
or implied.

