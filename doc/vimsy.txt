*vimsy.txt*                    Vimsy                     Version 0.1

              A nice vim-based development environment          *vimsy*



==============================================================================
0. Table of Contents                                      *vimsy-contents*

1. |vimsy-plugins|       List of Plugins
2. |vimsy-keys|          How to use Vimsy's features.
3. |vimsy-todo|          A huge list of things to improve
4. |vimsy-rejplugins|    Why good plugins might not be included
5. |vimsy-changes|       List of user-visible changes
6. |vimsy-about|         Download new versions, licensing, etc.


==============================================================================
1. Installed Plugins                                      *vimsy-plugins*


Full list: |bundles|

Some highlights:

  - |NERDTree|      \d    Navigate an outline view of the files in your filesystem
  - |NERDCommenter| ^/    Quickly comment and uncomment blocks of source code
  - |bufexplorer|   ^J    Quickly switch among your open buffers
  - |taglist|       \l    Quickly see and navigate among the tags in the curent file
  - |rails|         :R    Brilliance for Rails developers by the legendary tpope
  - |snipmate|      TAB   The tab key to inserts Textmate-like snippets
  - |matchit|       %     Use % to bounce betwee html tags, if/else/end, begin/end, etc
  - |surround|      ysiw" Quickly surround text objects with quotes and HTML tags
  - |endwise|             Automatically close blocks in ruby, vb, or vimscript
  - |indexedsearch| /     Shows "Match 4 of 52" when searching with /, ?, *, etc

See |vimsy-rejected-plugins| for the plugins that didn't make the cut.


==============================================================================
2. Quick Feature List

  - Hit for<tab> to insert the snippet for a for loop.  |snipmate|  Also, in
    insert mode, hit Control-R <tab> to show a list of available snippets.
  - % bounces between most control structures (if/else/end, etc). |matchit|
  - Control-/ toggles commenting (except in gvim: |vimsy-control-/|)
  - Control-W e to close a buffer without affecting the window layout
  - Erroneous trailing whitspace is highlighted
  - To turn off search highlighting (and redraw the screen), hit Control-L.
  - Additional syntax highlighting: haml, sass, cucumber, markdown,
    textile, git commits, shoulda, jquery.
  - Restores folds and cursor position when opening a file again


==============================================================================
3. Keystrokes                                                 *vimsy-keys*

Vim's default mapleader is \, see |vimsy-mapleader| for more.


Mapleader

|MAP-B|   \B    Convert Ruby blocks between {} and do/end.
|MAP-C|   \C    Toggle commenting on and off (see |CTRL-/|).
|MAP-d|   \d    Toggle the nerd tree open and closed.
|MAP-D|   \D    Show the current file in the nerd tree.
|MAP-l|   \l    Toggle the taglist open and closed.
|MAP-w|   \w    Switch through Vim's line wrapping modes.
|MAP-/|   \/    Recursive grep for the identifier under the cursor.
|MAP-*|   \*    Recursive grep for the identifier under the cursor.


                                                    *MAP-B*
\B      When you select a block in visual mode, hitting \B (capital
        B) converts between {} and do/end.  Thanks to matchy, you can
        just put your cursor on begin or end, then hit v%\B.
        |ruby-block-conv|


                                                    *MAP-c*
\c      Used by NERDCommenter, see |NERDComFunctionalitySummary|.


                                                    *MAP-C*
\C      Toggle the comments on the selected lines or current line.
        This is only a workaround because Control-/ doesn't work in
        all circumstances: |vimsy-control-/|.  We use capital C
        because nerd-commenter is already using small c as its
        map leader (for instance, <leader>c<space> also toggles
        comments |NERDComToggleComment|).


                                                    *MAP-d*
\d     Toggle the nerd tree open and closed.


                                                    *MAP-D*
\D     Show the current file in the nerd tree.


                                                    *MAP-l*
\l     Toggle the tag list for the current file.  The taglist
       shows all the tags in the current file, allowing you to
       quickly navigate among them.


                                                    *MAP-w*
\w     Vim supports three line wrapping modes: unwrapped,
       wrapped at the end of the line, and wrapped only at
       sensible word boundaries.  \w toggles through all
       three modes.


                                                    *MAP-star*
\*     Grep the entire project for the identifier under the cursor


|CTRL-J|        ^J    Open the buffer explorer
|CTRL-W_e|      ^We   Close the buffer but not the window.
|CTRL-W_CTRL-E| ^W^E  Close the buffer but not the window.
|CTRL-/|        ^/    Toggle commenting on and off (see |MAP-C|).


                                                    *CTRL-J*
C-J    Opens the buffer explorer (original C-J binding did the same
       thing as j).  TODO: this should probably change.


                                         *CTRL-W_e* *CTRL-W_CTRL-E*
C-We   Closes a buffer but leaves the window open (C-W C-E works too).


                                                    *CTRL-/*
C-/    Toggles comments.  If Control-/ doesn't work on your system
       (see |vimsy-control-/|) then you can use |MAP-C|.


Tasks:
Create a file or directory: \d (open nerdtree), put the cursor on the directory to contain the new file, and hit m.
Move or copy files: \d (open nerdtree), put the cursor on the directory to contain the new file, and hit m.

Vim Builtins: Here are some highlights.  Everything is listed in |index.txt|.
C-^ -- edit previous file (file marked with # in the output of :ls), C-W C-^ -- split and switch
:wa -- write all buffers (Save All)
:wqa -- write all buffers and quit
C-W _ -- maximize current window. C-W o or :on (:only) makes it even more maximal.
C-W KJHL -- move current window to the extreme border (J makes it full width at the bottom of the screen, etc)
C-W rR -- rotate open windows clockwise / counterclockwise
H M L -- move cursor on screen to high, middle, low
C-T / C-D -- (insert mode) insert tab / delete tab from beginning of line
C-O / C-I -- go to older / newer cursor position (see |jump-motions|)
[m ]m -- move to the previous or next method/function
[[ ][ -- move to previous or next outermost { } brace (ruby: class or module)
[( ]( -- move to previous or next paren ( )
gd gD -- go to definition of variable under cursor (d searches function, D searches file)
gq -- reformat comment (visually select first, or hit
      gq]/ to reformat to the end of the current comment block)

Rails:
gf -- if you're over a class or symbol, try gf.  It should take you.
:A -- go to alternate file (usually to the test file)
  AS -- split, AV -- vertical split, AT -- tab, AD -- replace current buffer
:R -- got to related file (model/schema, controller/template)
  RS -- split, RV -- vertical split, RT -- tab, RD -- replace current buffer
:Rmodel (name) -- go to the named model
  :Rcontroller, :Rview, :Rjavascript, :Rlayout, etc.
:Rake (targets) -- run rake, open errors in quickfix window
  with no targets, tries to figure out from current file
:Rextract -- extract a partial (in your view, use v to select the code to extract, hit :Rextract NAME (name of your partial), and out it comes
:Rtree -- open nerdtree view of the Rails project (any diff from \d?)
C-X C-U -- complete current word from Rails keywords


==============================================================================
4. DISCUSSION                                            *vimsy-discussion*

Vimsy includes some controversial features.  If you see surprising
behavior, this section may address it.  (If you're surprised that you
*don't* see an expected behavior, check |vimsy-rejected-plugins|).


Map Leader                                               *vimsy-mapleader*

A lot of tutorials recommend changing vim's |mapleader| from "\" to ",".
Vimsy doesn't do this because changing the mapleader would cause too
much surprise.  If you want "," to be your mapleader, drop this into
your ~/.vimrc before including vimsy:

    let mapleader = ","
    source $HOME/.vim/vimrc


Control-/                                                *vimsy-control-/*

This is the one keybinding that all IDEs use to toggle comments.  Vimsy
supports this, but there's a caveat: most terminals convert Control-/ to
Control-_, so we also bind toggle-comment to Control-_.  However, Control-_
is already used to switch RTL/LTR so Hebrew and Farsi developers may find
this a little surprising.

Furthermore, vim-gtk, vim-gnome, and MacVim are unable to produce Control-/.
You can test this for yourself:
  - hit i to enter insert mode, then hit control-V control-/.
  - if you see "^/" or "^_", your version of Vim can recognize Control-/.
  - if you see "/", then Control-/ is broken.  You must toggle commenting
    with Control-_ or <leader>C.

Ubuntu bug: https://bugs.launchpad.net/ubuntu/+source/vim/+bug/534124


==============================================================================
5. TODO                                                   *vimsy-todo*

split vim-update-bundles out of vimsy.
What about testing?  We need quickfix support for RSpec and Test::Unit.
  Do we still need RubySpec now that RubyTest does specs?
  rubytest should save the file before running the tests.
  rubytest should not scan for valid tests if running with T.  Just run the file.
  rubytest definitely needs to present its quickfix better.  (crib from recent rails.vim?)
  instead of railstest, http://www.vim.org/scripts/script.php?script_id=2869 ?
  is it possible to extract rails.vim's rSpec functionality and use it instead of current rSpec stuff?
Add ack plugin or something to make searching easier.
  Add http://github.com/adamlogic/ack.vim/commit/850e83088e0a623390446ea88fc8740857777f25 ?
Figure out a keypress to toggle :set paste! on and off.  I do it a lot.
Make ESC cancel bufexplorer and return to the previous file being edited, without affecting Control-6.
  This probably won't work in the terminal.  Also Control-C like command-t does.
Rails vim -- turn off logfile tweaks.  Coloring makes opening large files painful, plus it breaks 1G, 500G, etc to navigate in the file.
Also make bufexplorer support s and v to open new buffer horiz or vertically split. (already built-in?)
Add a.vim (alternate) http://www.vim.org/scripts/script.php?script_id=31 and map the keys to be the same as railsmode.
bufexplorer: use h and F1 for help and ? to search backward.
nerdtree: use h and F1 for help and ? to search backward.
nerdtree: I should be able to open bufexplorer and command-t from within nerdtree.
nerdtree: Make space behave the same as return when navigating the tree.
nerdtree: Make a keystroke to fire off a grep/ack from the selected directory or parent dir of the selected file
nerdtree: Add c/n to nerdtree for one-step file creation
interesting plugin: http://github.com/chrisbra/histwin.vim

Wishlist:
Is it possible to test this whole vimsy mess?  http://www.vim.org/scripts/script.php?script_id=2565 ?
show matching begin/else/end/etc when moving the cursor
Add a color switcher and some decent color themes.
Add :ver N and :hor N (:ht and :wd?) commands to set the vertical and horizontal size of the current window
Is it possible to make folding completely hands-off?  Maybe http://eigenclass.org/hiki.rb?simplefold+plugin+0.4.0 ?
Add a way to tell what color is under the cursor?  :echo synIDattr(synID(line('.'),col('.'),1),'name')
If you ruby-block-conv 'puts "#{var}"', it converts the variable interpolation in the string, not the surrounding block.


Never?:
Make HTML/XML tags auto-close?
  Asked tpope on irc about adding it to endwise: "sounds impossible" to do it with minimal false positives.
  maybe: Michael Sanders HTML AutoCloseTag: http://www.vim.org/scripts/script.php?script_id=2591
  or maybe: http://pastey.net/132688-2fb8 or http://github.com/mitechie/pyvim/blob/master/.vim/ftplugin/xml.vim
  or can I make completion close tags?  </TAB?  Too bad endwise doesn't auto-close HTML tags.
ruby indentation screws up when I type end_date, it unindents prematurely right after "end".
  Can't be easily fixed, just keep typing then hit Control-F: http://github.com/vim-ruby/vim-ruby/issues/issue/9


==============================================================================
6. Rejected Plugins            *vimsy-rejplugins*  *vimsy-rejected-plugins*

These are plugins that were considered but not used.  See
|vimsy-plugins| for the list of currently installed plugins.

fugitive     Even now, months later, the read and write commands still feel
             weird.  I give up and will now try to find something more gitish.

original fuzzyfinder    So laborious to use that I don't see why anyone
             would use it over vim's :find built-in.  It's horrible.

fuzzyfinder-textmate    Jamis wrote this, then abandoned it when the
             fuzzyfinder script kept breaking his changes.  Others have
             tried to pick up the slack but it hasn't been satisfying.
             Vimsy used ff-tm until 5 Aug 2010.

specky       Includes a bunch of non-rspec-related garbage.  It's hard
             enough to get vim scripts to reliably coexist as it is,
             there's no need to bring along unrelated stuff!

vim-rspec    relies on Ruby+hpricot/xsltproc parsing HTML?  Seems rather
             overcomplex.  Glad I found a simpler alternative.

camelcasemotion    How often do you need to move within a camelcase word?
             Is it really worth learning custom move keys over f and b?


==============================================================================
7. Major Changes                                        *vimsy-changes*

04 Aug 2010 - drop fugitive, it just feels too different.
04 Aug 2010 - Switch wholesale to Pathogen and update-bundles.


==============================================================================
8. About                                               *vimsy-about*

Vimsy was assembled by Scott Bronson, brons_vimsy@rinspin.com.
Its vimrc was written from scratch but cribbed heavily from
http://vim.wikia.com/wiki/Example_vimrc and Akita's version of
Scrooloose's vimfiles.

Homepage:     http://github.com/bronson/vimsy

                                                      *vimsy-license*
Each plugin in vimsy is licensed individually by its author.
All other content in Vimsy is distributable under the same
terms as Vim itself.  See |license|.  No warranties, expressed
or implied.

